{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harcr\\\\Documents\\\\Desarrollo-ciclo4\\\\Proyecto_React\\\\my-app\\\\src\\\\App.js\";\n//import React, { useState } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n//import { Navbar } from \"./Navbar\";\n//import { Navigation } from \"./Navigation\";\n\nimport { HOME, LOGIN, LOGOUT, ADMIN, VENTAS } from './config/roots/paths';\nimport Home from './Compo/Home';\nimport Login from './Compo/Login';\nimport Admin from './Compo/Admin';\nimport Logout from './Compo/Logout';\nimport Ventas from './Compo/Ventas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: HOME,\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: LOGIN,\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: ADMIN,\n        element: /*#__PURE__*/_jsxDEV(Admin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: LOGOUT,\n        element: /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: VENTAS,\n        element: /*#__PURE__*/_jsxDEV(Ventas, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\nconst App = () => { \r\n\r\n  const [rol, setRol] = useState('admin')\r\n  return (\r\n    <BrowserRouter>\r\n      <Navbar rol = {rol}/>\r\n      <Navigation rol = {rol}/> \r\n    </BrowserRouter>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n*/\n/*\r\n\r\nlet nombre = [];\r\nlet cantidad = [];\r\nlet precioUnitario = []; \r\nlet menu1;\r\nlet cliente;\r\nlet admin;\r\nlet opcion1;\r\nlet opcion2;\r\nlet counter = 0;\r\n\r\n\r\nmenu1 = \"Seleccione su rol\\n\\n\"+\r\n        \"1. Administrador\\n\"+\r\n        \"2. Cliente\\n\";\r\n\r\nadmin= \"(Admin)Ingrese la opción que desee realizar\\n\\n\"+\r\n\"1- Ingresar nuevo producto\\n\"+\r\n\"2- Visualizar Productos\\n\"+\r\n\"3- Visualizar ventas realizadas\\n\"+\r\n\"4- Salir\\n\";\r\n\r\ncliente = \"(Cliente)Ingrese la opción que desee realizar\\n\\n\"+\r\n        \"1- Visualizar productos y seleccionar\\n\"+\r\n        \"2- Ver carrito de compras\\n\"+\r\n        \"3- Salir\\n\";\r\n\r\n\r\nwhile(1){\r\n  opcion1 = parseInt(prompt(menu1));\r\n\r\nif((opcion1 <= 0) || (opcion1>2)) {alert(\"Opcion Inválida\");}  \r\nelse if (opcion1 === 1) {\r\n      do{                                                         //opciones para el administrador\r\n        opcion2 = parseInt(prompt(admin));\r\n      switch(opcion2){\r\n          case 1:\r\n            ingresarProducto();\r\n            counter++;\r\n              break;\r\n          case 2:\r\n            visualizarProductos();\r\n          break;\r\n          case 3:\r\n            alert(\"crear funcion para Visualizar ventas realizadas\");\r\n          break;\r\n          default:\r\n              break;\r\n        }   \r\n        }while(opcion2 <= 3);        \r\n} \r\n\r\nelse{\r\n  do{                                         //opciones para cliente\r\n    opcion2 = parseInt(prompt(cliente));\r\n  switch(opcion2){\r\n      case 1:\r\n        alert(\"crear funcion para Visualizar productos y seleccionar\");\r\n          break;\r\n      case 2:\r\n        alert(\"crear funcion para Ver carrito de compras\");\r\n      break;\r\n      default:\r\n          break;\r\n  }\r\n  }while(opcion2 <= 2);\r\n\r\n}\r\n\r\n}\r\n\r\n// DESARROLLO DE FUNCIONES PARA CADA OPCION:\r\n/*\r\nFuncion para crear productos nuevos, solo puede acceder administrador\r\n\r\nfunction ingresarProducto(){\r\n  nombre[counter] = prompt(\"Digite Producto\");\r\n  cantidad[counter] = prompt(\"Digite cantidad\");\r\n  precioUnitario[counter] = prompt(\"Digite Precio unitario\");\r\n  alert(\"Producto agregado satisfactoriamente !!\");\r\n}\r\n\r\n/*\r\n  Funcion para visualizar productos, solo accede administrador\r\n\r\n\r\n function visualizarProductos(){\r\n  let acumulador = \"\";\r\n  for (let index = 0; index < counter; index++) {\r\n    acumulador = acumulador + \"Producto : \"+nombre[index]+\"\\t\"+\"\\t\"+\r\n                              \"Cantidad : \"+cantidad[index]+\"\\t\"+\"\\t\"+\r\n                              \"Precio :\"   +precioUnitario[index]+\r\n                              \"\\n\";\r\n  }\r\n  alert(acumulador);\r\n\r\n\r\n}\r\n\r\n*/\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BrowserRouter","Routes","Route","HOME","LOGIN","LOGOUT","ADMIN","VENTAS","Home","Login","Admin","Logout","Ventas","App"],"sources":["C:/Users/harcr/Documents/Desarrollo-ciclo4/Proyecto_React/my-app/src/App.js"],"sourcesContent":["\r\n\r\n//import React, { useState } from \"react\";\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\n//import { Navbar } from \"./Navbar\";\r\n//import { Navigation } from \"./Navigation\";\r\n\r\nimport {HOME,LOGIN,LOGOUT,ADMIN,VENTAS} from './config/roots/paths';\r\n\r\nimport Home from './Compo/Home';\r\nimport Login from './Compo/Login';\r\nimport Admin from './Compo/Admin';\r\nimport Logout from './Compo/Logout';\r\nimport Ventas from './Compo/Ventas';\r\n\r\nexport default function App() {\r\n  return (\r\n\r\n    <BrowserRouter>\r\n<Routes>\r\n<Route path ={ HOME } element={<Home/> }/>\r\n<Route path ={ LOGIN} element={<Login/> }/>\r\n<Route path ={ ADMIN } element={<Admin/> }/>\r\n<Route path ={ LOGOUT } element={<Logout/> }/>\r\n<Route path ={ VENTAS } element={<Ventas/> }/>\r\n</Routes>\r\n\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nconst App = () => { \r\n\r\n  const [rol, setRol] = useState('admin')\r\n  return (\r\n    <BrowserRouter>\r\n      <Navbar rol = {rol}/>\r\n      <Navigation rol = {rol}/> \r\n    </BrowserRouter>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n*/\r\n/*\r\n\r\nlet nombre = [];\r\nlet cantidad = [];\r\nlet precioUnitario = []; \r\nlet menu1;\r\nlet cliente;\r\nlet admin;\r\nlet opcion1;\r\nlet opcion2;\r\nlet counter = 0;\r\n\r\n\r\nmenu1 = \"Seleccione su rol\\n\\n\"+\r\n        \"1. Administrador\\n\"+\r\n        \"2. Cliente\\n\";\r\n\r\nadmin= \"(Admin)Ingrese la opción que desee realizar\\n\\n\"+\r\n\"1- Ingresar nuevo producto\\n\"+\r\n\"2- Visualizar Productos\\n\"+\r\n\"3- Visualizar ventas realizadas\\n\"+\r\n\"4- Salir\\n\";\r\n\r\ncliente = \"(Cliente)Ingrese la opción que desee realizar\\n\\n\"+\r\n        \"1- Visualizar productos y seleccionar\\n\"+\r\n        \"2- Ver carrito de compras\\n\"+\r\n        \"3- Salir\\n\";\r\n\r\n\r\nwhile(1){\r\n  opcion1 = parseInt(prompt(menu1));\r\n\r\nif((opcion1 <= 0) || (opcion1>2)) {alert(\"Opcion Inválida\");}  \r\nelse if (opcion1 === 1) {\r\n      do{                                                         //opciones para el administrador\r\n        opcion2 = parseInt(prompt(admin));\r\n      switch(opcion2){\r\n          case 1:\r\n            ingresarProducto();\r\n            counter++;\r\n              break;\r\n          case 2:\r\n            visualizarProductos();\r\n          break;\r\n          case 3:\r\n            alert(\"crear funcion para Visualizar ventas realizadas\");\r\n          break;\r\n          default:\r\n              break;\r\n        }   \r\n        }while(opcion2 <= 3);        \r\n} \r\n\r\nelse{\r\n  do{                                         //opciones para cliente\r\n    opcion2 = parseInt(prompt(cliente));\r\n  switch(opcion2){\r\n      case 1:\r\n        alert(\"crear funcion para Visualizar productos y seleccionar\");\r\n          break;\r\n      case 2:\r\n        alert(\"crear funcion para Ver carrito de compras\");\r\n      break;\r\n      default:\r\n          break;\r\n  }\r\n  }while(opcion2 <= 2);\r\n\r\n}\r\n\r\n}\r\n\r\n// DESARROLLO DE FUNCIONES PARA CADA OPCION:\r\n/*\r\nFuncion para crear productos nuevos, solo puede acceder administrador\r\n\r\nfunction ingresarProducto(){\r\n  nombre[counter] = prompt(\"Digite Producto\");\r\n  cantidad[counter] = prompt(\"Digite cantidad\");\r\n  precioUnitario[counter] = prompt(\"Digite Precio unitario\");\r\n  alert(\"Producto agregado satisfactoriamente !!\");\r\n}\r\n\r\n/*\r\n  Funcion para visualizar productos, solo accede administrador\r\n\r\n\r\n function visualizarProductos(){\r\n  let acumulador = \"\";\r\n  for (let index = 0; index < counter; index++) {\r\n    acumulador = acumulador + \"Producto : \"+nombre[index]+\"\\t\"+\"\\t\"+\r\n                              \"Cantidad : \"+cantidad[index]+\"\\t\"+\"\\t\"+\r\n                              \"Precio :\"   +precioUnitario[index]+\r\n                              \"\\n\";\r\n  }\r\n  alert(acumulador);\r\n\r\n\r\n}\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";AAEA;AACA,SAASA,aAAa,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAC/D;AACA;;AAEA,SAAQC,IAAI,EAACC,KAAK,EAACC,MAAM,EAACC,KAAK,EAACC,MAAM,QAAO,sBAAsB;AAEnE,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,MAAM,MAAM,gBAAgB;AAAC;AAEpC,eAAe,SAASC,GAAG,GAAG;EAC5B,oBAEE,QAAC,aAAa;IAAA,uBAClB,QAAC,MAAM;MAAA,wBACP,QAAC,KAAK;QAAC,IAAI,EAAIV,IAAM;QAAC,OAAO,eAAE,QAAC,IAAI;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAAE,eAC1C,QAAC,KAAK;QAAC,IAAI,EAAIC,KAAM;QAAC,OAAO,eAAE,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAAE,eAC3C,QAAC,KAAK;QAAC,IAAI,EAAIE,KAAO;QAAC,OAAO,eAAE,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAAE,eAC5C,QAAC,KAAK;QAAC,IAAI,EAAID,MAAQ;QAAC,OAAO,eAAE,QAAC,MAAM;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAAE,eAC9C,QAAC,KAAK;QAAC,IAAI,EAAIE,MAAQ;QAAC,OAAO,eAAE,QAAC,MAAM;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EACrC;IAAA;IAAA;IAAA;EAAA,QAEW;AAEppGA,KAvCwBM,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}